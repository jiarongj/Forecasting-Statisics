
> set.seed(30)
> y<-ts(rnorm(50))
> y
Time Series:
Start = 1 
End = 50 
Frequency = 1 
 [1] -1.28851820 -0.34768941 -0.52162885  1.27347316
 [5]  1.82452060 -1.51130794  0.11050805 -0.76079623
 [9] -0.66989702  0.27451969 -1.02327202 -1.81939791
[13] -0.66778981 -0.05929799  0.88016591  0.26851292
…
[37]  0.22035091  0.53147867  2.16970096 -2.93441824
[41] -0.99556463  1.16955322 -0.48003984 -1.66886763
[45]  1.13399719 -0.31759583  0.17585799 -0.62550955
[49] -1.63952782 -0.67148442
> autoplot(y)+ggtitle("white noise”)


> aelec
        time  value
1   1996.000  79.35
2   1996.083  75.78
3   1996.167  86.32
4   1996.250  72.60
5   1996.333  74.86
6   1996.417  83.81
7   1996.500  79.80
…
191 2011.833  93.37
192 2011.917  98.34
193 2012.000  86.44
194 2012.083  85.04
195 2012.167  97.80

> aelecc<-ts(aelec)
> aelecc
Time Series:
Start = 1 
End = 195 
Frequency = 1 
        time  value
  1 1996.000  79.35
  2 1996.083  75.78
  3 1996.167  86.32
  4 1996.250  72.60
  5 1996.333  74.86
…
192 2011.917  98.34
193 2012.000  86.44
194 2012.083  85.04
195 2012.167  97.80
> autoplot(aelecc[,"value"]) + ggtitle("cool") + xlab("Year") + ylab("Thousands")

# Simple forecasting: Average method  
> gog <- ts(gog[,3])
> gog
Time Series:
Start = 1 
End = 1000 
Frequency = 1 
   [1] 392.8300 392.5121 397.3059
   [4] 398.0113 400.4902 408.0957
   [7] 416.5905 413.0038 413.6099
  [10] 413.0734 414.7127 411.1310
  [13] 409.9884 408.1156 404.5190
  [16] 401.2850 403.0386 404.7227
…
 [982] 804.6100 806.0700 802.1750
 [985] 805.0200 819.3100 823.8700
 [988] 835.6700 832.1500 823.3100
 [991] 802.3200 796.7900 795.6950
 [994] 798.5300 801.4900 801.3400
 [997] 806.9700 808.3800 809.5600
[1000] 813.6700
> meanf(gog, h = 10)    # use a vector x=gog to forecast the next h=10 years’ value
     Point Forecast    Lo 80  Hi 80
1001       599.4252 446.0804 752.77
1002       599.4252 446.0804 752.77
1003       599.4252 446.0804 752.77
1004       599.4252 446.0804 752.77
1005       599.4252 446.0804 752.77
1006       599.4252 446.0804 752.77
1007       599.4252 446.0804 752.77
1008       599.4252 446.0804 752.77
1009       599.4252 446.0804 752.77
1010       599.4252 446.0804 752.77
        Lo 95   Hi 95
1001 364.7754 834.075
1002 364.7754 834.075
1003 364.7754 834.075
1004 364.7754 834.075
1005 364.7754 834.075
1006 364.7754 834.075
1007 364.7754 834.075
1008 364.7754 834.075
1009 364.7754 834.075
1010 364.7754 834.075

# Naive forecast: aka random walk forecasts
> naive(gog, h =10) or snaive(got, h=10)   # optimal when data follow a random walk
     Point Forecast    Lo 80    Hi 80
1001         813.67 802.4765 824.8634
1002         813.67 797.8401 829.4999
1003         813.67 794.2824 833.0576
1004         813.67 791.2831 836.0569
1005         813.67 788.6407 838.6993
1006         813.67 786.2518 841.0882
1007         813.67 784.0549 843.2850
1008         813.67 782.0102 845.3298
1009         813.67 780.0897 847.2503
1010         813.67 778.2732 849.0667
        Lo 95    Hi 95
1001 796.5511 830.7889
1002 789.4602 837.8797
1003 784.0192 843.3208
1004 779.4322 847.9078
1005 775.3910 851.9490
1006 771.7374 855.6025
1007 768.3777 858.9623
1008 765.2505 862.0895
1009 762.3133 865.0266
1010 759.5353 867.8047

> rwf(gog, h=10, drift=TRUE)
     Point Forecast    Lo 80    Hi 80
1001       814.0912 802.8996 825.2829
1002       814.5125 798.6694 830.3556
1003       814.9338 795.5106 834.3569
1004       815.3550 792.9048 837.8053
1005       815.7763 790.6512 840.9014
1006       816.1976 788.6471 843.7480
1007       816.6188 786.8315 846.4062
1008       817.0401 785.1646 848.9155
1009       817.4613 783.6190 851.3037
1010       817.8826 782.1745 853.5907
        Lo 95    Hi 95
1001 796.9752 831.2073
1002 790.2825 838.7425
1003 785.2286 844.6389
1004 781.0203 849.6897
1005 777.3508 854.2018
1006 774.0628 858.3323
1007 771.0630 862.1746
1008 768.2908 865.7894
1009 765.7039 869.2188
1010 763.2718 872.4934

> autoplot(gog) + autolayer(naive(gog, h = 10))
> autoplot(gog)+autolayer(snaive(gog, h = 10))


> read.csv(("ausbeer.csv"))
      X    time value
1     1 1956.00   284
2     2 1956.25   213
3     3 1956.50   227
4     4 1956.75   308
5     5 1957.00   262
6     6 1957.25   228
7     7 1957.50   236
…
216 216 2009.75   488
217 217 2010.00   414
218 218 2010.25   374
> ausbeer_pr <- read.csv(("ausbeer.csv"))
> ausbeer <- ausbeer_pr[,3]
> ausbeer_now <- ts(ausbeer, frequency = 4, start = c(1956,1), end = c(2010,2))
> ausbeer_now
     Qtr1 Qtr2 Qtr3 Qtr4
1956  284  213  227  308
1957  262  228  236  320
1958  272  233  237  313
…
1999  435  383  424  521
2000  421  402  414  500
2001  451  380  416  492
2002  428  408  406  506
2003  435  380  421  490
2004  435  390  412  454
2005  416  403  408  482
2006  438  386  405  491
2007  427  383  394  473
2008  420  390  410  488
2009  415  398  419  488
2010  414  374     

> beer2 <- window(ausbeer_now, start = 1992, end = c(2007,4))
> autoplot(beer2)

￼
> autoplot(beer2) + autolayer(meanf(beer2, h=11), series = "Mean", PI = FALSE) + autolayer(naive(beer2, h=11), series = "Naïve", PI = FALSE) + autolayer(snaive(beer2, h=11), series = "Seasonal Naïve", PI = FALSE) + ggtitle("Forecasts for quarterly beer production") + ylab("Megalitres") + xlab("Year") + guides(colours = guide_legend(title = "Forecast Type"))
￼
> autoplot(mi) + autolayer(meanf(mi, h = 45), series = "Mean", PI = FALSE) + autolayer(rwf(mi, h = 45), series = "Random walk forests", PI = FALSE) + autolayer(rwf(mi, drift = TRUE, h = 45), series = "Drift", PI = FALSE) + ggtitle("Google stock (daily ending 6 Dec 2013)") + xlab("Day") + ylab("Closing Price (US$)") + guides(colour=guide_legend(title="Forecast"))
￼

> filter(aelec, aelec$time<2000)
> filter(aelec, between(aelec$time, 1997, 2005))
> ggAcf(aelec)
> naa<- subset(aelec, time<=2005, select=c("time", "value"))
> naa
        time  value
…
108 2004.917 113.55
109 2005.000  91.65
> naa<- subset(aelec, between(time, 1999, 2005), select=c("time", "value"))
> naa
        time  value
37  1999.000  81.59
38  1999.083  81.77
39  1999.167  91.24
…
107 2004.833  99.77
108 2004.917 113.55
109 2005.000  91.65

# ts() is a structure used to store time series data
> u <- ts(c(12,41,4124,513,5325,232,5,235,26,63,36,346,234,34,6,3474,7457,234,1,235,56,567,58,456,3,246,24), start = 2011, frequency = 12)
> u
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct
2011   12   41 4124  513 5325  232    5  235   26   63
2012  234   34    6 3474 7457  234    1  235   56  567
2013    3  246   24                                   
      Nov  Dec
2011   36  346
2012   58  456
2013          

> y <- ts(c(123,39,78,52,110), start=2012)
> y
Time Series:
Start = 2012 
End = 2016 
Frequency = 1 
[1] 123  39  78  52 110
